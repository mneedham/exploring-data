successFreq = df_success[success_index,]$freq
notSuccess_index = match(word, notSuccessWords)[1]
notSuccessFreq = df_notSuccess[notSuccess_index,]$freq
successFreq=ifelse(is.na(successFreq), 0, successFreq)
notSuccessFreq=ifelse(is.na(notSuccessFreq), 0, notSuccessFreq)
ll = logLikely(successFreq, sum(df_success$freq), notSuccessFreq, sum(df_notSuccess$freq))
print(paste(c(word, successFreq, notSuccessFreq, ll), collapse = " "))
result = rbind(result, c(word, ll))
}
result
head(result)
successWords = rownames(success_tdm)
notSuccessWords = rownames(notSuccess_tdm)
for(word in successWords) {
success_index = match(word, successWords)[1]
successFreq = df_success[success_index,]$freq
notSuccess_index = match(word, notSuccessWords)[1]
notSuccessFreq = df_notSuccess[notSuccess_index,]$freq
successFreq=ifelse(is.na(successFreq), 0, successFreq)
notSuccessFreq=ifelse(is.na(notSuccessFreq), 0, notSuccessFreq)
ll = logLikely(successFreq, sum(df_success$freq), notSuccessFreq, sum(df_notSuccess$freq))
print(paste(c(word, successFreq, notSuccessFreq, ll), collapse = " "))
}
calculateLL = function(word) {
success_index = match(word, successWords)[1]
successFreq = df_success[success_index,]$freq
notSuccess_index = match(word, notSuccessWords)[1]
notSuccessFreq = df_notSuccess[notSuccess_index,]$freq
successFreq=ifelse(is.na(successFreq), 0, successFreq)
notSuccessFreq=ifelse(is.na(notSuccessFreq), 0, notSuccessFreq)
return(logLikely(successFreq, sum(df_success$freq), notSuccessFreq, sum(df_notSuccess$freq)))
}
sapply(successWords, function(x) calculateLL(x))
data.frame(word = names(lls), score = lls)
lls = apply(successWords, function(x) calculateLL(x))
data.frame(word = names(lls), score = lls)
lls = apply(successWords, function(x) calculateLL(x))
lls = sapply(successWords, function(x) calculateLL(x))
data.frame(word = names(lls), score = lls)
result = data.frame(word = names(lls), score = lls)
result %>% sorts(desc(score)) %>% head()
result %>% arrange(desc(score)) %>% head()
result %>% arrange(desc(score)) %>% head(10)
result %>% arrange(score) %>% head(10)
success
success %>% select(grepl("sharia", action))
success %>% filter(grepl("sharia", action))
result %>% arrange(desc(score)) %>% head()
calculateLL = function(word) {
success_index = match(word, successWords)[1]
successFreq = df_success[success_index,]$freq
notSuccess_index = match(word, notSuccessWords)[1]
notSuccessFreq = df_notSuccess[notSuccess_index,]$freq
successFreq=ifelse(is.na(successFreq), 0, successFreq)
notSuccessFreq=ifelse(is.na(notSuccessFreq), 0, notSuccessFreq)
ll = logLikely(successFreq, sum(df_success$freq), notSuccessFreq, sum(df_notSuccess$freq))
return(successFreq, notSuccessFreq, ll)
}
sapply(successWords, function(x) calculateLL(x))
calculateLL = function(word) {
success_index = match(word, successWords)[1]
successFreq = df_success[success_index,]$freq
notSuccess_index = match(word, notSuccessWords)[1]
notSuccessFreq = df_notSuccess[notSuccess_index,]$freq
successFreq=ifelse(is.na(successFreq), 0, successFreq)
notSuccessFreq=ifelse(is.na(notSuccessFreq), 0, notSuccessFreq)
ll = logLikely(successFreq, sum(df_success$freq), notSuccessFreq, sum(df_notSuccess$freq))
return(c(successFreq, notSuccessFreq, ll))
}
sapply(successWords, function(x) calculateLL(x))
sapply(successWords, function(x) unlist(calculateLL(x)))
data.frame(word = names(lls), score = lls)
lls = sapply(successWords, function(x) unlist(calculateLL(x)))
result = data.frame(word = names(lls), score = lls)
data.frame(word = names(lls), score = lls)
names(lls)
lls
names(lls)
lls
sapply(lls, function(x) x[0])
sapply(lls, function(x) x[[0]])
sapply(lls, function(x) x[[1]])
sapply(lls, function(x) x[[2]])
sapply(lls, function(x) x[[3]])
calculateLL = function(word) {
success_index = match(word, successWords)[1]
successFreq = df_success[success_index,]$freq
notSuccess_index = match(word, notSuccessWords)[1]
notSuccessFreq = df_notSuccess[notSuccess_index,]$freq
successFreq=ifelse(is.na(successFreq), 0, successFreq)
notSuccessFreq=ifelse(is.na(notSuccessFreq), 0, notSuccessFreq)
ll = logLikely(successFreq, sum(df_success$freq), notSuccessFreq, sum(df_notSuccess$freq))
return(ll)
}
lls = sapply(successWords, calculateLL)
result = data.frame(word = names(lls), score = lls)
result %>% arrange(desc(score)) %>% head()
for(word in successWords) {
success_index = match(word, successWords)[1]
successFreq = df_success[success_index,]$freq
notSuccess_index = match(word, notSuccessWords)[1]
notSuccessFreq = df_notSuccess[notSuccess_index,]$freq
successFreq=ifelse(is.na(successFreq), 0, successFreq)
notSuccessFreq=ifelse(is.na(notSuccessFreq), 0, notSuccessFreq)
ll = logLikely(successFreq, sum(df_success$freq), notSuccessFreq, sum(df_notSuccess$freq))
print(paste(c(word, ll, successFreq, notSuccessFreq, sum(df_success$freq), sum(df_notSuccess$freq)), collapse = " "))
}
match("sharia", successWords)
successWords[694,]
df_success[694,]
df %>% select(grepl("sharia", action))
df %>% filter(grepl("sharia", action))
df %>% filter(grepl("Sharia", action))
df %>% filter(grepl("Sharia", action)) %>% select(action, signatureCount)
lls = sapply(successWords, calculateLL)
result = data.frame(word = names(lls), score = lls)
result %>% arrange(desc(score)) %>% head()
result %>% arrange(desc(score)) %>% head(10)
result %>% arrange(desc(score)) %>% head(20)
result %>% arrange(score) %>% head(20)
result %>% arrange(score) %>% head(20)
Terms(success_tdm)
rownames(success_tdm)
Terms(success_tdm)
?Terms
nTerms(success_tdm)
Docs(success_tdm)
result %>% arrange(desc(score)) %>% head()
result %>% arrange(desc(score)) %>% head(10)
result %>% arrange(score) %>% head(10)
result %>% arrange(desc(score)) %>% head()
successWords
success %>% select(action)
?removePunctuation
removePunctuation
removePunctuation()
?content_transformer
vcorpus
vcorpus[[1]]
content(vcorpus[[1]])
tm_map(vcorpus, content_transformer(toupper))
content(tm_map(vcorpus, content_transformer(toupper))[[1]])
?toupper
?content_transformer
uniqueWords = function(d) {
return(paste(unique(d), collapse = ' '))
}
content(tm_map(vcorpus, content_transformer(uniqueWords))[[1]])
uniqueWords("i am mark")
uniqueWords("i am mark a")
uniqueWords("i am mark a i")
unique("i am makr i a")
uniqueWords = function(d) {
return(paste(unique(strsplit(d, " ")), collapse = ' '))
}
unique("i am makr i a")
uniqueWords("i am makr i a")
uniqueWords = function(d) {
return(paste(unique(d), collapse = ' '))
}
uniqueWords("i am makr i a")
uniqueWords("i am makr i makr")
unique("I am mark I")
?unique
unique(c("I", "I"))
unique(c("I", "I", "mark"))
uniqueWords = function(d) {
return(paste(unique(strsplit(d, " ")), collapse = ' '))
}
uniqueWords("I am mark I")
strsplit("I am mark I")
strsplit("I am mark I", " ")
unique(strsplit("I am mark I", " "))
unique(strsplit("I am mark I", " ")[[1]])
uniqueWords = function(d) {
return(paste(unique(strsplit(d, " ")[[1]]), collapse = ' '))
}
content(tm_map(vcorpus, content_transformer(uniqueWords))[[1]])
vcorpus = content(tm_map(vcorpus, content_transformer(uniqueWords))[[1]])
successCorpus = createCorpus(success %>% select(action))
successCorpus = content(tm_map(successCorpus, content_transformer(uniqueWords))[[1]])
success_tdm = TermDocumentMatrix(successCorpus, list(tokenize = configurableTokenizer(2)))
freq = rowSums(as.matrix(success_tdm))
data.frame(word = names(freq), freq = freq) %>% arrange(desc(freq)) %>% head(10)
successCorpus = createCorpus(success %>% select(action))
successCorpus = content(tm_map(successCorpus, content_transformer(uniqueWords))[[1]])
success_tdm = TermDocumentMatrix(successCorpus)
succcess_freq = rowSums(as.matrix(success_tdm))
df_success = data.frame(word = names(succcess_freq), freq = succcess_freq)
notSuccessCorpus = createCorpus(not_success %>% select(action))
notSuccessCorpus = content(tm_map(notSuccessCorpus, content_transformer(uniqueWords))[[1]])
notSuccess_tdm = TermDocumentMatrix(notSuccessCorpus)
notSuccess_freq = rowSums(as.matrix(notSuccess_tdm))
df_notSuccess = data.frame(word = names(notSuccess_freq), freq = notSuccess_freq)
successWords = rownames(success_tdm)
notSuccessWords = rownames(notSuccess_tdm)
lls = sapply(successWords, calculateLL)
result = data.frame(word = names(lls), score = lls)
result %>% arrange(desc(score)) %>% head()
successCorpus = createCorpus(success %>% select(action))
successCorpus = content(tm_map(successCorpus, content_transformer(uniqueWords))[[1]])
success_tdm = TermDocumentMatrix(successCorpus)
successCorpus
successCorpus = createCorpus(success %>% select(action))
successCorpus = content(tm_map(successCorpus, content_transformer(uniqueWords))
successCorpus = content(tm_map(successCorpus, content_transformer(uniqueWords)))
successCorpus = content(tm_map(successCorpus, content_transformer(uniqueWords)))
success_tdm = TermDocumentMatrix(successCorpus)
succcess_freq = rowSums(as.matrix(success_tdm))
df_success = data.frame(word = names(succcess_freq), freq = succcess_freq)
successWords = rownames(success_tdm)
notSuccessWords = rownames(notSuccess_tdm)
lls = sapply(successWords, calculateLL)
result = data.frame(word = names(lls), score = lls)
result %>% arrange(desc(score)) %>% head()
success %>%> filter(grepl("Sharia", action))
success %>% filter(grepl("Sharia", action))
match(successWords, "sharia")
match("sharia", successWords)
successWords[694,]
successWords[694]
successWords[,694]
dfSuccess[694,]
df_success[694,]
success %>% filter(grepl("Sharia", action))
uniqueWords("No laws based on the precepts and doctrines of any religion should be allowed to be implemented or used within the United Kingdom. Sharia law opposes democracy and supports actions that either breach or are contrary to human rights, civil liberties and current statute and common laws of the United Kingdom ")
success %>% filter(grepl("Sharia", action))
uniqueWords("Sharia Law and the use of Sharia courts within the UK should be prohibited.")
successCorpus = createCorpus(success %>% select(action))
successCorpus = content(tm_map(successCorpus, content_transformer(uniqueWords)))
success_tdm = TermDocumentMatrix(successCorpus)
succcess_freq = rowSums(as.matrix(success_tdm))
df_success = data.frame(word = names(succcess_freq), freq = succcess_freq)
successCorpus = content(tm_map(successCorpus, content_transformer(uniqueWords)))
successCorpus
successCorpus = createCorpus(success %>% select(action))
successCorpus
successCorpus = tm_map(successCorpus, content_transformer(uniqueWords))
success_tdm = TermDocumentMatrix(successCorpus)
succcess_freq = rowSums(as.matrix(success_tdm))
df_success = data.frame(word = names(succcess_freq), freq = succcess_freq)
notSuccessCorpus = createCorpus(not_success %>% select(action))
notSuccessCorpus = tm_map(notSuccessCorpus, content_transformer(uniqueWords))
notSuccess_tdm = TermDocumentMatrix(notSuccessCorpus)
notSuccess_freq = rowSums(as.matrix(notSuccess_tdm))
df_notSuccess = data.frame(word = names(notSuccess_freq), freq = notSuccess_freq)
successWords = rownames(success_tdm)
notSuccessWords = rownames(notSuccess_tdm)
lls = sapply(successWords, calculateLL)
result = data.frame(word = names(lls), score = lls)
result %>% arrange(desc(score)) %>% head()
result %>% arrange(desc(score)) %>% head(10)
result %>% arrange(score) %>% head(10)
read.csv("data/wtp_data_petitions.csv", header = FALSE)
df = read.csv("../data/wtp_data_petitions.csv", header = FALSE)
df %>% head())
df %>% head()
names(df) = c("serial", "id", "type", "title", "text", "threshold", "count", "needed", "url", "deadline", "status", "created")
df %>% head()
df %>% head()
df %>% filter(status == "Reviewed")
VCorpus(df %>% filter(status == "Reviewed") %>% select(body))
df %>% filter(status == "Reviewed") %>% select(body)
df %>% filter(status == "Reviewed") %>% select(body)
df %>% filter(status == "Reviewed")
df %>% filter(status == "Reviewed") %>% select(body)
df %>% filter(status == "Reviewed") %>% select(text)
VCorpus(df %>% filter(status == "Reviewed") %>% select(text))
VCorpus(DataframeSource(df %>% filter(status == "Reviewed") %>% select(text)))
corpus = VCorpus(DataframeSource(df %>% filter(status == "Reviewed") %>% select(text)))
corpus
successful = VCorpus(DataframeSource(df %>% filter(status == "Reviewed") %>% select(text)))
unsuccessful = VCorpus(DataframeSource(df %>% filter(status == "Closed") %>% select(text)))
?tm_map
successful = VCorpus(DataframeSource(df %>% filter(status == "Reviewed") %>% select(text)))
successful = tm_map(successful, content_transformer(uniqueWords))
unsuccessful = VCorpus(DataframeSource(df %>% filter(status == "Closed") %>% select(text)))
unsuccessful = tm_map(unsuccessful, content_transformer(uniqueWords))
successful_tdm = TermDocumentMatrix(successful)
successful_tdm
success_freq = rowSums(as.matrix(successful_tdm))
success_freq
lls
success_freq
Terms(successful_tdm)
lls = sapply(successfulTerms, calculateLL)
result = data.frame(word = names(lls), score = lls)
result %>% arrange(desc(score)) %>% head()
successfulTerms
successfulTerms = Terms(successful_tdm)
successful = VCorpus(DataframeSource(df %>% filter(status == "Reviewed") %>% select(text)))
successful = tm_map(successful, content_transformer(uniqueWords))
successful_tdm = TermDocumentMatrix(successful)
successfulTerms = Terms(successful_tdm)
unsuccessful = VCorpus(DataframeSource(df %>% filter(status == "Closed") %>% select(text)))
unsuccessful = tm_map(unsuccessful, content_transformer(uniqueWords))
unsuccessful_tdm = TermDocumentMatrix(unsuccessful)
unsuccessfulTerms = Terms(unsuccessful_tdm)
success_freq = rowSums(as.matrix(successful_tdm))
df_success = data.frame(word = names(success_freq), freq = success_freq)
notSuccess_freq = rowSums(as.matrix(unsuccessful_tdm))
df_notSuccess = data.frame(word = names(notSuccess_freq), freq = notSuccess_freq)
calculateLL = function(word) {
success_index = match(word, successfulTerms)[1]
successFreq = df_success[success_index,]$freq
notSuccess_index = match(word, unsuccessfulTerms)[1]
notSuccessFreq = df_notSuccess[notSuccess_index,]$freq
successFreq=ifelse(is.na(successFreq), 0, successFreq)
notSuccessFreq=ifelse(is.na(notSuccessFreq), 0, notSuccessFreq)
ll = logLikely(successFreq, sum(df_success$freq), notSuccessFreq, sum(df_notSuccess$freq))
return(ll)
}
lls = sapply(successfulTerms, calculateLL)
result = data.frame(word = names(lls), score = lls)
result %>% arrange(desc(score)) %>% head()
result %>% arrange(desc(score)) %>% head(10)
result %>% arrange(score) %>% head(10)
df = data.frame(text = c("I am Mark, I am Mark", "Neo4j is cool, Neo4j is cool"))
corpus = VCorpus(DataframeSource(df))
corpus
TermDocumentMatrix(corpus)
as.matrix(TermDocumentMatrix(corpus))
as.matrix(TermDocumentMatrix(corpus))
rowSums(as.matrix(TermDocumentMatrix(corpus)))
df = data.frame(text = c("I am Mark I am Mark", "Neo4j is cool Neo4j is cool"))
corpus = VCorpus(DataframeSource(df))
rowSums(as.matrix(TermDocumentMatrix(corpus)))
corpus
corpus[[1]]
content(corpus[[1]])
as.matrix(TermDocumentMatrix(corpus))
?TermDocumentMatrix
rowSums(as.matrix(TermDocumentMatrix(corpus,wordLengths = 1)))
rowSums(as.matrix(TermDocumentMatrix(corpus,control(wordLengths = 1))))
rowSums(as.matrix(TermDocumentMatrix(corpus,control = wordLengths = 1))))
rowSums(as.matrix(TermDocumentMatrix(corpus,control = list(wordLengths = 1))))
TermDocumentMatrix(corpus, control = list(wordLengths = 1)
TermDocumentMatrix(corpus, control = list(wordLengths = 1))
TermDocumentMatrix(corpus, control = list(wordLengths = 1))
TermDocumentMatrix(corpus, control = list(wordLengths = 1))
rowSums(as.matrix(TermDocumentMatrix(corpus, control = list(wordLengths = c(1, Inf)))))
corpus = tm_map(corpus, content_transformer(uniqueWords))
rowSums(as.matrix(TermDocumentMatrix(corpus, control = list(wordLengths = c(1, Inf)))))
?DataframeSource
text = c("I am Mark I am Mark", "Neo4j is cool Neo4j is cool")
corpus = VCorpus(VectorSource(text))
rowSums(as.matrix(TermDocumentMatrix(corpus, control = list(wordLengths = c(1, Inf)))))
as.matrix(TermDocumentMatrix(corpus, control = list(wordLengths = c(1, Inf))))
tdm = as.matrix(TermDocumentMatrix(corpus, control = list(wordLengths = c(1, Inf))))
rowSums(tdm)
tdm
rowSums(tdm)
tdm = as.matrix(TermDocumentMatrix(corpus, control = list(wordLengths = c(1, Inf))))
tdm
rowSums(tdm)
corpus = tm_map(corpus, content_transformer(uniqueWords))
tdm = as.matrix(TermDocumentMatrix(corpus, control = list(wordLengths = c(1, Inf))))
tdm
log(2)
logLikely(1,10,2,100)
logLikely = function(n1, t1, n2, t2) {
n1=n1+1
n2=n2+1
e1 = t1 * 1.0 * (n1 + n2) / (t1 + t2)
e2 = t2 * 1.0 * (n1 + n2) / (t1 + t2)
LL = 2 * ((n1 * log(n1 / e1)) + n2 * log(n2/e2))
if(n2 * 1.0 / t2 > n1 * 1.0 / t1) {
return(-LL)
} else {
return(LL)
}
}
logLikely = function(n1, t1, n2, t2) {
n1=n1+1
n2=n2+1
e1 = t1 * 1.0 * (n1 + n2) / (t1 + t2)
e2 = t2 * 1.0 * (n1 + n2) / (t1 + t2)
LL = 2 * ((n1 * log(n1 / e1)) + n2 * log(n2/e2))
if(n2 * 1.0 / t2 > n1 * 1.0 / t1) {
return(-LL)
} else {
return(LL)
}
}
logLikely(1,10,2,100)
unsuccessful = VCorpus(DataframeSource(df %>% filter(status == "Closed") %>% select(text)))
successful = VCorpus(DataframeSource(df %>% filter(status == "Reviewed") %>% select(text)))
successful <- tm_map(successful, stemDocument)
successful <- tm_map(successful, stripWhitespace)
successful = tm_map(successful, content_transformer(uniqueWords))
successful_tdm = TermDocumentMatrix(successful)
successfulTerms = Terms(successful_tdm)
unsuccessful = VCorpus(DataframeSource(df %>% filter(status == "Closed") %>% select(text)))
unsuccessful <- tm_map(successful, stemDocument)
unsuccessful <- tm_map(successful, stripWhitespace)
unsuccessful = tm_map(unsuccessful, content_transformer(uniqueWords))
unsuccessful_tdm = TermDocumentMatrix(unsuccessful)
unsuccessfulTerms = Terms(unsuccessful_tdm)
success_freq = rowSums(as.matrix(successful_tdm))
df_success = data.frame(word = names(success_freq), freq = success_freq)
notSuccess_freq = rowSums(as.matrix(unsuccessful_tdm))
df_notSuccess = data.frame(word = names(notSuccess_freq), freq = notSuccess_freq)
calculateLL = function(word) {
success_index = match(word, successfulTerms)[1]
successFreq = df_success[success_index,]$freq
notSuccess_index = match(word, unsuccessfulTerms)[1]
notSuccessFreq = df_notSuccess[notSuccess_index,]$freq
successFreq=ifelse(is.na(successFreq), 0, successFreq)
notSuccessFreq=ifelse(is.na(notSuccessFreq), 0, notSuccessFreq)
ll = logLikely(successFreq, sum(df_success$freq), notSuccessFreq, sum(df_notSuccess$freq))
return(ll)
}
lls = sapply(successfulTerms, calculateLL)
result = data.frame(word = names(lls), score = lls)
result %>% arrange(desc(score)) %>% head()
successful = VCorpus(DataframeSource(df %>% filter(status == "Reviewed") %>% select(text)))
successful = tm_map(successful, stemDocument)
successful = tm_map(successful, stripWhitespace)
successful = tm_map(successful, content_transformer(uniqueWords))
successful_tdm = TermDocumentMatrix(successful)
successfulTerms = Terms(successful_tdm)
successfulTerms
successful = tm_map(successful, PlainTextDocument)
successful_tdm = TermDocumentMatrix(successful)
successfulTerms = Terms(successful_tdm)
successfulTerms
successful = VCorpus(DataframeSource(df %>% filter(status == "Reviewed") %>% select(text)))
successful = tm_map(successful, removePunctuation)
successful = tm_map(successful, stripWhitespace)
successful = tm_map(successful, stemDocument)
successful = tm_map(successful, content_transformer(uniqueWords))
successful = tm_map(successful, PlainTextDocument)
successful_tdm = TermDocumentMatrix(successful)
successfulTerms = Terms(successful_tdm)
successful = VCorpus(DataframeSource(df %>% filter(status == "Reviewed") %>% select(text)))
df = read.csv("../data/wtp_data_petitions.csv", header = FALSE)
names(df) = c("serial", "id", "type", "title", "text", "threshold", "count", "needed", "url", "deadline", "status", "created")
successful = VCorpus(DataframeSource(df %>% filter(status == "Reviewed") %>% select(text)))
successful = tm_map(successful, removePunctuation)
successful = tm_map(successful, stripWhitespace)
successful = tm_map(successful, stemDocument)
successful = tm_map(successful, content_transformer(uniqueWords))
successful = tm_map(successful, PlainTextDocument)
successful_tdm = TermDocumentMatrix(successful)
successfulTerms = Terms(successful_tdm)
successfulTerms
successful = VCorpus(DataframeSource(df %>% filter(status == "Reviewed") %>% select(text)))
successful = tm_map(successful, removePunctuation)
successful = tm_map(successful, stripWhitespace)
successful = tm_map(successful, stemDocument)
successful = tm_map(successful, content_transformer(uniqueWords))
successful = tm_map(successful, PlainTextDocument)
successful_tdm = TermDocumentMatrix(successful)
successfulTerms = Terms(successful_tdm)
unsuccessful = VCorpus(DataframeSource(df %>% filter(status == "Closed") %>% select(text)))
unsuccessful = tm_map(unsuccessful, removePunctuation)
unsuccessful = tm_map(unsuccessful, stripWhitespace)
unsuccessful = tm_map(unsuccessful, stemDocument)
unsuccessful = tm_map(unsuccessful, content_transformer(uniqueWords))
unsuccessful = tm_map(unsuccessful, PlainTextDocument)
unsuccessful_tdm = TermDocumentMatrix(unsuccessful)
unsuccessfulTerms = Terms(unsuccessful_tdm)
success_freq = rowSums(as.matrix(successful_tdm))
df_success = data.frame(word = names(success_freq), freq = success_freq)
notSuccess_freq = rowSums(as.matrix(unsuccessful_tdm))
df_notSuccess = data.frame(word = names(notSuccess_freq), freq = notSuccess_freq)
calculateLL = function(word) {
success_index = match(word, successfulTerms)[1]
successFreq = df_success[success_index,]$freq
notSuccess_index = match(word, unsuccessfulTerms)[1]
notSuccessFreq = df_notSuccess[notSuccess_index,]$freq
successFreq=ifelse(is.na(successFreq), 0, successFreq)
notSuccessFreq=ifelse(is.na(notSuccessFreq), 0, notSuccessFreq)
ll = logLikely(successFreq, sum(df_success$freq), notSuccessFreq, sum(df_notSuccess$freq))
return(ll)
}
lls = sapply(successfulTerms, calculateLL)
result = data.frame(word = names(lls), score = lls)
result %>% arrange(desc(score)) %>% head()
result %>% arrange(desc(score)) %>% head(10)
?tagPost
?tagPos
?tagPOS
library(openNLP)
install.packages("openNLP")
?tagPOS
library(openNLP)
library(openNLP)
R CMD javareconf
javareconf
library(rJava)
.jinit()
Sys.setenv(JAVA_HOME = '/Library/Java//Home')
# Java 1.6 will set up the 'Home' link under /Library/Java
Sys.setenv(LD_LIBRARY_PATH = '$LD_LIBRARY_PATH:$JAVA_HOME/lib')
library(rJava)
.jinit()
Sys.setenv(JAVA_HOME = '/Library/Java//Home')
Sys.setenv(LD_LIBRARY_PATH = '$LD_LIBRARY_PATH:$JAVA_HOME/lib')
JAVA_HOME
Sys.setenv(JAVA_HOME = '/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home')
library(rJava)
.jinit()
Sys.setenv(LD_LIBRARY_PATH = '$LD_LIBRARY_PATH:$JAVA_HOME/lib')
library(rJava)
.jinit()
Sys.getenv('JAVA_HOME')
library(rJava)
require("NLP")
?tagPOS
library(openNLP)
library(openNLP)
